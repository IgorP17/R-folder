2 + 2 == 5
T = TRUE
T == TRUE
x <- 41
x / 2
x <- "buya"
x
sum(1,2,3)
rep("Yo ho!", times = 3)
rep("Yo ho!\r\n", times = 3)
sqrt(16)
help(sum)
example(min)
list.files()
source("try1.R")
source("try1.R")
source("try1.R")
source("try1.R")
source("try1.R")
source("try1.R")
vector1 <- c(1,2,3,4)
vector1
5:9
seq(5,9)
seq(9,5,-1)
vector[2]
vector1[2]
vector1[0]
source("try2.R")
vector[4] = "buya"
vector1[4] = "buya"
#add new
vector1[5] = "buya5"
vector1[6] <- "z6"
vector1
vector1[7] <- 'z6'
vector1 <- c(1,2,3,4)
vector1[1,3]
vector1[c(1,3)]
vector1[2:4]
vector1[1:3] <- c("b1", "b2", "b3")
ranks <- 1:3
names(ranks) <- c("first", "second", "third")
ranks["first"]
ranks
vesselsSunk <- c(4, 5, 1)
barplot(vesselsSunk)
names(vesselsSunk) <- c("England", "France", "Norway")
barplot(vesselsSunk)
barplot(1:100)
barplot(vesselsSunk)
b <- c(4, 5, 6)
a + b
a <- c(1, 2, 3)
a + b
a - b
a == c(1, 99, 3)
a == c(1, 99, 3)
sin(a)
x <- seq(1, 20, 0.1)
y <- sin(x)
plot(x, y)
a <- c(1, 3, NA, 7, 9)
sum(a)
sum(a, na.rm = TRUE)
matrix(0, 3, 4)
a <- 1:12
print(a)
matrix(a, 3, 4)
plank <- 1:8
dim(plank) <- c(2, 4)
print(plank)
matrix(1:25, 5, 5)
plank[2, 3]
plank[1, 4] <- 0
plank[2,]
plank[1,]
plank[, 2:4]
elevation <- matrix(1, 10, 10)
elevation[4, 6] <- 0
contour(elevation)
persp(elevation)
persp(elevation, expand=0.2)
contour(volcano)
persp(volcano, expand=0.2)
image(volcano)
persp(volcano, expand=0.2)
persp(volcano, expand=0.2)
limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Blackbeard'
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Blackbeard')
limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Blackbeard')
mean(limbs)
barplot(limbs)
abline(h = mean(limbs))
limbs <- c(4, 3, 4, 3, 2, 4, 4, 14)
'Scooter', 'Dan', 'Mikey', 'Davy Jones')
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Davy Jones')
mean(limbs)
barplot(limbs)
abline(h = mean(limbs))
abline(h = median(limbs))
limbs <- c(4, 3, 4, 3, 2, 4, 4, 14)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Davy Jones')
mean(limbs)
median(limbs)
mean(1:4)
median(1:4)
mean(1,2,3)
median(1,2,3)
median(c(1,2,3)
median(c(1,2,3))
median(c(1,2,3))
mean(c(1,2,3))
mean(c(1,1,3))
median(c(1,1,3))
5/3
mean(c(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
median(c(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
median(c(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
median(c(6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
median(c(77777,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
pounds <- c(45000, 50000, 35000, 40000, 35000, 45000, 10000, 15000)
barplot(pounds)
meanValue <- mean(pounds)
abline(h = meanValue)
deviation <- sd(pounds)
abline(h = meanValue + deviation)
abline(h = meanValue - deviation)
mean(c(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
median(c(5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1000000000))
median(5,5,10)
median(c(5,5,10)
sad
median(c(5,5,10))
median(c(5,5,10))
median(c(5,5,100))
median(c(5,5,100))
mean(c(5,5,100))
sd(1:2) ^ 2
sd(1:2)
vector1 <- c(1,2,3,4)
vector1[2]
vector1[4] <- "buya"
vector1[5] <- "buya5"
vector1[c(1,3)]
vector1[2:4]
x <- seq(1, 20, 0.1)
y <- sin(x)
plot(x, y)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
print(chests)
print(types)
as.integer(types)
levels(types)
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
plot(weights, prices)
plot(weights, prices, pch=as.integer(types))
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
plot(weights, prices, pch=as.integer(types))
legend("topright", c("gems", "gold", "silver"), pch=1:3)
legend("topright", levels(types), pch=1:length(levels(types)))
treasure <- data.frame(weights, prices, types)
print(treasure)
treasure[[2]]
treasure[[3],[2]]
treasure[[3][2]]
treasure[3][2]
treasure[3,2]
treasure[2,3]
treasure[["weights"]]
treasure$prices
treasure$prices[1]
treasure$types
treasure$prices[1]
read.csv("targets.csv")
read.csv("targets.csv")
read.csv("targets.csv")
read.table("infantry.txt", sep="\t")
read.table("infantry.txt", sep="\t")
read.table("infantry.txt", sep="\t", header=TRUE)
targets <- read.csv("targets.csv")
infantry <- read.table("infantry.txt", sep="\t", header=TRUE)
merge(x = targets, y = infantry)
piracy <- read.csv("piracy.csv")
piracy <- read.csv("piracy.csv")
gdp <- read.table("gdp.txt", sep="  ", header=TRUE)
gdp <- read.table("gdp.txt", sep=" ", header=TRUE)
countries <- merge(x = gdp, y = piracy)
View(countries)
View(countries)
list.files()
list.files(pattern = ".*R")
countries <- merge(x = gdp, y = piracy)
plot(countries$GDP,countries$Piracy)
piracy <- read.csv("piracy.csv")
gdp <- read.table("gdp.txt", sep=" ", header=TRUE)
countries <- merge(x = gdp, y = piracy)
plot(countries$GDP,countries$Piracy)
piracy <- read.csv("piracy.csv")
gdp <- read.table("gdp.txt", sep=" ", header=TRUE)
countries <- merge(x = gdp, y = piracy)
plot(countries$GDP,countries$Piracy)
cor.test(countries$GDP, countries$Piracy)
line <- lm(countries$Piracy ~ countries$GDP)
abline(line)
install.packages("ggplot2")
library("ggplot2", lib.loc="C:/Users/Gor/Documents/R/win-library/3.1")
detach("package:ggplot2", unload=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
piracy <- read.csv("piracy.csv")
gdp <- read.table("gdp.txt", sep=" ", header=TRUE)
countries <- merge(x = gdp, y = piracy)
plot(countries$GDP,countries$Piracy)
cor.test(countries$GDP, countries$Piracy)
line <- lm(countries$Piracy ~ countries$GDP)
abline(line)
help(package = "ggplot2")
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
qplot(weights, prices, color = types)
library(ggplot2)
qplot(weights, prices, color = types)
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
library(ggplot2)
qplot(weights, prices, color = types)
library(devtools)
find.package(devtools)
find.package("devtools")
find.package("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
library(ggplot2)
qplot(weights, prices, color = types)
find.package("devtools")
install.packages("devtools")
weights <- c(300, 200, 100, 250, 150)
prices <- c(9000, 5000, 12000, 7500, 18000)
chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
types <- factor(chests)
library(ggplot2)
qplot(weights, prices, color = types)
library(devtools)
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
find.package(devtools)
getwd()
dir()
ls()
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
dim(m)#dimentions
attributes(m)
m <- matrix(1:6, nrow = 2, ncol = 3)
m
m <- 1:10
dim(m) <- c(2,5)
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- list(1, "a", TRUE, 1+4i)
x
x <- factor(c("yes", "yes", "no", "yes", "no"))
x
table(x)
unclass(x)
x <- factor(c("yes", "yes", "no", "yes", "no"), levels = c("yes", "no"))
x
unclass(x)
x <- c(1,2,NA,4,5)
is.na(x)
is.nan(x)
x <- c(1,2,NaN,4,5)
is.na(x)
is.nan(x)
x <- c(1,2,NA,NaN,5)
is.na(x)
is.nan(x)
x <- data.frame(foo = 1:4, bar = c(T,T,F,T))
x
nrow(x)
ncol(x)
x <- 1:3
names(x)
names(x) <- c("foo", "bar", "norf")
x
names(x)
x <- list(a = 1, b = 2, c = 3)
x
x.$a
x[$a]
x.[$a]
m <- matrix(1:4, nrow = 2, ncol = 2)
dimnames(m) <- list(c("a","b"),c("c","d"))
m
x <- 1:3
y <- 10:12
cbind(x,y)
rbind(x,y)
x <- c("a","b","c","d","e","f")
x[1]
x[2:4]
x <- c("a","b","b","d","e","a")
x[x > "a"]
u <- x > "a"
u
x[u]
x <- matrix(1:6, 2, 3)
x[1,2]
x
x[1,]
x[,2]
x[1,2, drop = FALSE]
x[1, ,drop = FALSE]
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$bar
x[["bar"]]
x[$bar]
x["$bar"]
x["bar"]
x <- list(foo = 1:4, bar = 0.6, baz="hello")
x[c(1,3)]
x[[name]]
x <- list(foo = 1:4, bar = 0.6, baz="hello")
name <- "foo"
x[[name]]
x$name
x$foo
x <- list(a = list(10,12,14), bar = 0.6, baz="hello")
x[[1]][[3]]
x[c[1,3]]
x[c(1,3)]
x[[c(1,3)]]
x <- list(aardwark = 1:5)
x$a
x[["a"]]
x[["a", exact = FALSE]]
x <- c(1,2,NA,4,NA,6)
is.na(x)
bad <- is.na(x)
x[!bad]
x <- c(1,2,NA,4,NA,6)
y <- c("a","b",NA,"d",NA,"f")
good <- complete.cases(x,y)
x[good]
y[good]
good
